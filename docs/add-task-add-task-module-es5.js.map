{"version":3,"sources":["webpack:///src/app/add-task/add-task-routing.module.ts","webpack:///src/app/add-task/add-task.component.ts","webpack:///src/app/add-task/add-task.component.html","webpack:///src/app/add-task/add-task.module.ts","webpack:///src/app/core/model/add-task.ts"],"names":["routes","path","component","AddTaskRoutingModule","forChild","imports","exports","AddTaskComponent","translate","router","taskService","projectService","modalService","parentTaskService","userService","spinner","route","lang","taskModal","selectedTaskModal","snapshot","params","setDefaultLang","use","show","selectedTaskId","taskId","fetchSelectedTaskById","hide","getTaskById","subscribe","data","console","log","fetchSelectedProject","projectId","getProjectsById","response","selectedProject","setParent","saveParentTask","saveTask","parentTask","task","redirectAfterSave","reset","error","updateTask","navigate","popMsg","confirmCallBack","popTitle","confirmOK","getProjects","modelRef","openProjectSearchPopUp","obj","searchedProject","event","date","getUserList","openSearchPopUp","selectedEmployee","selectedItem","selectedParentTask","getParentTasks","openParentTaskSearchPopUp","parentId","taskForm","submitted","onSubmit","searchProject","searchParentTask","changeStartDate","searchEmployee","selector","templateUrl","styleUrls","AddTaskModule","forRoot","declarations","AddTask","ParentTask","status"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAKA,QAAMA,MAAM,GAAW,CACrB;AACEC,UAAI,EAAE,EADR;AAEEC,eAAS,EAAE;AAFb,KADqB,EAKrB;AACED,UAAI,EAAE,SADR;AAEEC,eAAS,EAAE;AAFb,KALqB,CAAvB;;QAeaC,oB;;;;;YAAAA;;;;yBAAAA,oB;AAAoB,O;AAAA,gBAHtB,CAAC,6DAAaC,QAAb,CAAsBJ,MAAtB,CAAD,CAGsB,EAFrB,4DAEqB;;;;0HAApBG,oB,EAAoB;AAAA;AAAA,kBAFrB,4DAEqB;AAAA,O;AAFT,K;;;;;sEAEXA,oB,EAAoB;cAJhC,sDAIgC;eAJvB;AACRE,iBAAO,EAAE,CAAC,6DAAaD,QAAb,CAAsBJ,MAAtB,CAAD,CADD;AAERM,iBAAO,EAAE,CAAC,4DAAD;AAFD,S;AAIuB,Q;;;;;;;;;;;;;;;;;;ACpBjC;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;;;ACYoB;;AAAqC;;AAAmB;;;;;;AAD5D;;AACI;;AACJ;;;;;;;;AADS;;AAAA;;;;;;AAgBL;;AAAkC;;AAAqB;;;;;;AAD3D;;AACI;;AACA;;AAA4C;;AAA4C;;AAC5F;;;;;;;;AAFS;;AAAA;;AACA;;AAAA;;;;;;AA+BL;;AAAgD;;AAAuB;;;;;;AAD3E;;AACI;;AACJ;;;;;;;;AADS;;AAAA;;;;;;;;AAQL;;AAEI;AAAA;;AAAA;;AAAA;AAAA;;AAA4B;;;;AAChC;;;;;;AAFI;;AAC4B;;AAAA;;;;;;AAe5B;;AAAuC;;AAAsB;;;;;;AADjE;;AACI;;AACJ;;;;;;;;AADS;;AAAA;;;;;;AAYL;;AAAqC;;AAAoB;;;;;;AAD7D;;AACI;;AACJ;;;;;;;;AADS;;AAAA;;;;;;AAaL;;AAA8C;;AAAgB;;;;;;AADlE;;AACI;;AACJ;;;;;;;;AADS;;AAAA;;;;;;AAaT;;AACqD;;;;AAAwB;;;;;;AADvD;;AAC+B;;AAAA;;;;;;AACrD;;AACwD;;;;AAA2B;;;;;;AAD7D;;AACkC;;AAAA;;;;;;;;;;;;;;;;QDhH/DC,gB;AASX,gCAAoBC,SAApB,EACUC,MADV,EAEUC,WAFV,EAGUC,cAHV,EAIUC,YAJV,EAKUC,iBALV,EAMUC,WANV,EAOUC,OAPV,EAQUC,KARV,EAQyB;AAAA;;AARL,aAAAR,SAAA,GAAAA,SAAA;AACV,aAAAC,MAAA,GAAAA,MAAA;AACA,aAAAC,WAAA,GAAAA,WAAA;AACA,aAAAC,cAAA,GAAAA,cAAA;AACA,aAAAC,YAAA,GAAAA,YAAA;AACA,aAAAC,iBAAA,GAAAA,iBAAA;AACA,aAAAC,WAAA,GAAAA,WAAA;AACA,aAAAC,OAAA,GAAAA,OAAA;AACA,aAAAC,KAAA,GAAAA,KAAA;AAfV,aAAAC,IAAA,GAAe,IAAf;AAEO,aAAAC,SAAA,GAAqB,IAAI,4DAAJ,EAArB;AACA,aAAAC,iBAAA,GAA6B,IAAI,4DAAJ,EAA7B;;AAcL,YAAI,KAAKV,MAAL,CAAYW,QAAZ,CAAqBC,MAAzB,EAAiC;AAC/B,eAAKJ,IAAL,GAAY,KAAKR,MAAL,CAAYW,QAAZ,CAAqBC,MAArB,CAA4BJ,IAAxC;AACA,eAAKT,SAAL,CAAec,cAAf,CAA8B,KAAKL,IAAnC;AACA,eAAKT,SAAL,CAAee,GAAf,CAAmB,KAAKN,IAAxB;AACD;AACF;;;;mCAEO;AACN,eAAKF,OAAL,CAAaS,IAAb;;AACA,cAAI,KAAKf,MAAL,CAAYW,QAAZ,CAAqBC,MAAzB,EAAiC;AAC/B,iBAAKI,cAAL,GAAsB,KAAKhB,MAAL,CAAYW,QAAZ,CAAqBC,MAArB,CAA4BK,MAAlD;;AACA,gBAAI,KAAKD,cAAT,EAAyB;AACvB,mBAAKE,qBAAL;AACD;AACF;;AACD,eAAKZ,OAAL,CAAaa,IAAb;AACD;;;gDAEuB;AAAA;;AACtB,eAAKlB,WAAL,CAAiBmB,WAAjB,CAA6B,KAAKJ,cAAlC,EAAkDK,SAAlD,CAA4D,UAAAC,IAAI,EAAI;AAClE,iBAAI,CAACZ,iBAAL,GAAyBY,IAAzB;AACAC,mBAAO,CAACC,GAAR,CAAYF,IAAZ;;AACA,iBAAI,CAACG,oBAAL,CAA0BH,IAAI,CAAC,WAAD,CAA9B;AAED,WALD;AAMD;;;6CAEoBI,S,EAAW;AAAA;;AAC9B,eAAKxB,cAAL,CAAoByB,eAApB,CAAoCD,SAApC,EAA+CL,SAA/C,CAAyD,UAAAO,QAAQ,EAAI;AACnE,kBAAI,CAAClB,iBAAL,CAAuBmB,eAAvB,GAAyCD,QAAzC;AACA,kBAAI,CAACnB,SAAL,GAAiB,MAAI,CAACC,iBAAtB;AACD,WAHD;AAID;;;mCACU;AACT,cAAI,KAAKD,SAAT,EAAoB;AAClB,gBAAI,KAAKA,SAAL,CAAeqB,SAAnB,EAA8B;AAC5B,mBAAKC,cAAL;AACD,aAFD,MAEO;AACL,mBAAKC,QAAL;AACD;AACF;AACF;;;yCAEgB;AAAA;;AACf,eAAK1B,OAAL,CAAaS,IAAb;AACA,cAAIkB,UAAU,GAAG;AAAEA,sBAAU,EAAE,KAAKxB,SAAL,CAAeyB;AAA7B,WAAjB;AACA,eAAK9B,iBAAL,CAAuB2B,cAAvB,CAAsCE,UAAtC,EAAkDZ,SAAlD,CAA4D,UAAAO,QAAQ,EAAI;AACtE,kBAAI,CAACO,iBAAL,CAAuB,gCAAvB,EAAyD,YAAM;AAAE,oBAAI,CAACC,KAAL;AAAc,aAA/E,EAAiF,SAAjF;;AACA,kBAAI,CAAC9B,OAAL,CAAaa,IAAb;AACD,WAHD,EAGG,UAAAkB,KAAK,EAAI;AACV,kBAAI,CAAC/B,OAAL,CAAaa,IAAb;;AACA,kBAAI,CAACgB,iBAAL,CAAuB,iBAAvB,EAA0C,YAAM,CAAG,CAAnD,EAAqD,OAArD;AACD,WAND;AAOD;;;mCAEU;AAAA;;AACT,eAAK7B,OAAL,CAAaS,IAAb;;AACA,cAAI,KAAKN,SAAL,IAAkB,KAAKA,SAAL,CAAeQ,MAArC,EAA6C;AAC3C,iBAAKhB,WAAL,CAAiBqC,UAAjB,CAA4B,KAAK7B,SAAjC,EAA4CY,SAA5C,CAAsD,UAACO,QAAD,EAAc;AAClE,oBAAI,CAACO,iBAAL,CAAuB,2BAAvB,EAAoD,YAAM;AAAE,sBAAI,CAACC,KAAL;AAAc,eAA1E,EAA4E,SAA5E;;AACA,oBAAI,CAAC9B,OAAL,CAAaa,IAAb;AACD,aAHD,EAIE,UAAAkB,KAAK,EAAI;AACP,oBAAI,CAAC/B,OAAL,CAAaa,IAAb;;AACA,oBAAI,CAACgB,iBAAL,CAAuB,gBAAvB,EAAyC,YAAM,CAAG,CAAlD,EAAoD,OAApD;AACD,aAPH;AAQD,WATD,MASO;AACL,iBAAKlC,WAAL,CAAiB+B,QAAjB,CAA0B,KAAKvB,SAA/B,EAA0CY,SAA1C,CAAoD,UAAAO,QAAQ,EAAI;AAC9D,oBAAI,CAACO,iBAAL,CAAuB,yBAAvB,EAAkD,YAAM;AACtD,sBAAI,CAACC,KAAL;;AAEA,sBAAI,CAAC7B,KAAL,CAAWgC,QAAX,CAAoB,CAAC,MAAI,CAAC/B,IAAL,GAAY,YAAb,CAApB;AACD,eAJD,EAIG,SAJH;;AAKA,oBAAI,CAACF,OAAL,CAAaa,IAAb;AACD,aAPD,EAQE,UAAAkB,KAAK,EAAI;AACP,oBAAI,CAAC/B,OAAL,CAAaa,IAAb;;AACA,oBAAI,CAACgB,iBAAL,CAAuB,gBAAvB,EAAyC,YAAM,CAAG,CAAlD,EAAoD,OAApD;AACD,aAXH;AAYD;AACF;;;0CAEiBK,M,EAAQC,e,EAAiBC,Q,EAAU;AACnD,eAAKvC,YAAL,CAAkBwC,SAAlB,CAA4BH,MAA5B,EAAoCC,eAApC,EAAqDC,QAArD;AACD;;;wCAEe;AAAA;;AACd,eAAKpC,OAAL,CAAaS,IAAb;AACA,eAAKb,cAAL,CAAoB0C,WAApB,GAAkCvB,SAAlC,CAA4C,UAAAO,QAAQ,EAAI;AACtD,kBAAI,CAACiB,QAAL,GAAgB,MAAI,CAAC1C,YAAL,CAAkB2C,sBAAlB,CAAyClB,QAAzC,EACd,gBADc,EAEd,UAACmB,GAAD,EAAS;AAAE,oBAAI,CAACC,eAAL,CAAqBD,GAArB;AAA4B,aAFzB,EAGd,QAHc,CAAhB;;AAIA,kBAAI,CAACzC,OAAL,CAAaa,IAAb;AACD,WAND;AAOD;;;wCAEe8B,K,EAAOC,I,EAAM,CAE5B;;;yCAEgB;AAAA;;AACf,eAAK5C,OAAL,CAAaS,IAAb;AACA,eAAKV,WAAL,CAAiB8C,WAAjB,GAA+B9B,SAA/B,CAAyC,UAAAO,QAAQ,EAAI;AACnD,kBAAI,CAACiB,QAAL,GAAgB,MAAI,CAAC1C,YAAL,CAAkBiD,eAAlB,CAAkCxB,QAAlC,EACd,iBADc,EAEd,UAACmB,GAAD,EAAS;AAAE,oBAAI,CAACM,gBAAL,CAAsBN,GAAtB;AAA6B,aAF1B,EAGd,QAHc,CAAhB;;AAIA,kBAAI,CAACzC,OAAL,CAAaa,IAAb;AACD,WAND;AAOD;;;yCAEgB4B,G,EAAK;AACpB,eAAKtC,SAAL,CAAe4C,gBAAf,GAAkCN,GAAG,CAACO,YAAtC;AACA,eAAKT,QAAL,CAAc1B,IAAd;AACD;;;0CACiB;AAChB,eAAKV,SAAL,CAAe8C,kBAAf,GAAoC,IAAI,4DAAJ,GAAcA,kBAAlD;AACD;;;wCAEeR,G,EAAK;AACnB,eAAKtC,SAAL,CAAeoB,eAAf,GAAiCkB,GAAG,CAACO,YAArC;AACA,eAAKT,QAAL,CAAc1B,IAAd;AACD;;;2CAEkB;AAAA;;AACjB,eAAKb,OAAL,CAAaS,IAAb;AACA,eAAKX,iBAAL,CAAuBoD,cAAvB,GAAwCnC,SAAxC,CAAkD,UAAAO,QAAQ,EAAI;AAC5D,kBAAI,CAACiB,QAAL,GAAgB,MAAI,CAAC1C,YAAL,CAAkBsD,yBAAlB,CAA4C7B,QAA5C,EACd,oBADc,EAEd,UAACmB,GAAD,EAAS;AAAE,oBAAI,CAACQ,kBAAL,CAAwBR,GAAxB;AAA+B,aAF5B,EAGd,QAHc,CAAhB;;AAIA,kBAAI,CAACzC,OAAL,CAAaa,IAAb;AACD,WAND;AAOD;;;2CAEkB4B,G,EAAK;AAEtB,eAAKtC,SAAL,CAAe8C,kBAAf,GAAoCR,GAAG,CAACO,YAAxC;AACA,eAAK7C,SAAL,CAAe8C,kBAAf,CAAkCG,QAAlC,GAA6CX,GAAG,CAACO,YAAJ,CAAiBI,QAA9D;AACA,eAAKb,QAAL,CAAc1B,IAAd;AACD;;;gCAEO;AACN,eAAKwC,QAAL,CAAcC,SAAd,GAA0B,KAA1B;AACA,eAAKnD,SAAL,GAAiB,IAAI,4DAAJ,EAAjB;AACD;;;;;;;uBArKUX,gB,EAAgB,qI,EAAA,+H,EAAA,8H,EAAA,6H,EAAA,6J,EAAA,gI,EAAA,0H,EAAA,8H,EAAA,uH;AAAA,K;;;YAAhBA,gB;AAAgB,mC;AAAA;AAAA;;;;;;;;;;;;;;;;;ACd7B;;AAEI;;AAAkB;AAAA;;AAAA;;AAAA,qCAAmC,IAAA+D,QAAA,EAAnC;AAA6C,WAA7C;;AAEd;;AACI;;AAAgD;;;;AAA6B;;AAC7E;;AACI;;AACI;AAAA;AAAA;;;;AADJ;;AAIA;;AAGJ;;AACA;;AACI;;AACwC;AAAA,mBAAS,IAAAC,aAAA,EAAT;AAAwB,WAAxB;;AAA0B;;;;AAA2B;;AACjG;;AACJ;;AACA;;AACI;;AAAiD;;;;AAA0B;;AAC3E;;AACI;;AAAoD;AAAA;AAAA;;AAApD;;AAIA;;AAIJ;;AACJ;;AACA;;AAEI;;AACA;;AACI;;AAAO;;AACkB;AAAA;AAAA;;AADlB;;AACqD;;;;AAA+B;;AAC/F;;AACJ;;AACA;;AACI;;AAA8D;;;;AAA8B;;AAC5F;;AACI;;AAAoB;AAAA;AAAA;;AAApB;;AAEJ;;AACA;;AACI;;AACJ;;AACJ;;AACA;;AACI;;AAAyD;;;;AAAgC;;AACzF;;AACI;;AAC8B;AAAA;AAAA;;;;AAD9B;;AAKA;;AAGJ;;AACA;;AACI;;AACI;;AACoC;AAAA,mBAAS,IAAAC,gBAAA,EAAT;AAA2B,WAA3B;;AAA6B;;;;AACjE;;AACA;;AAIJ;;AACJ;;AACJ;;AACI;;AACI;;AAA+C;;;;AAA+B;;AAC9E;;AACI;;AAAmB;AAAA;AAAA,aAAiC,eAAjC,EAAiC;AAAA,mBAGG,IAAAC,eAAA,SAAwB,WAAxB,CAHH;AAGuC,WAHxE;;;;AAAnB;;AAMA;;AAGJ;;AACA;;AAA+C;;;;AAA6B;;AAC5E;;AACI;;AAAmB;AAAA;AAAA;;;;AAAnB;;AAMA;;AAGJ;;AACJ;;AACA;;AACI;;AAAgD;;;;AAA0B;;AAC1E;;AACI;;AAC4B;AAAA;AAAA;;;;AAD5B;;AAKA;;AAGJ;;AACA;;AACI;;AACwC;AAAA,mBAAS,IAAAC,cAAA,EAAT;AAAyB,WAAzB;;AAA2B;;;;AACnE;;AACJ;;AACJ;;AACA;;AACI;;AACI;;AACe;AAAA,mBAAS,IAAA7B,KAAA,EAAT;AAAgB,WAAhB;;AAAkB;;;;AAA0B;;AAC3D;;AAEA;;AAEJ;;AACJ;;AACR;;AACJ;;AACA;;AACI;;AAAwB;;AAAa;;AACzC;;;;;;;;;;;;;;;;;;AAhI4D;;AAAA;;AAEJ;;AAAA;;AACpC,qHAA+C,SAA/C,EAA+C,oGAA/C,EAA+C,UAA/C,EAA+C,IAA/C,EAA+C,UAA/C,EAA+C,wBAA/C;;AAGC;;AAAA;;AAKiB;;AAAA;;AAC4C;;AAAA;;AAIrB;;AAAA;;AAEO;;AAAA,kGAA4B,SAA5B,EAA4B,oGAA5B,EAA4B,UAA5B,EAA4B,IAA5B;;AAI/C;;AAAA;;AAUyB;;AAAA,sQAAyE,SAAzE,EAAyE,uBAAzE;;AAC8B;;AAAA;;AAIF;;AAAA;;AAEtC;;AAAA,sGAAgC,OAAhC,EAAgC,sBAAhC,EAAgC,KAAhC,EAAgC,CAAhC,EAAgC,KAAhC,EAAgC,EAAhC;;AAIpB;;AAAA;;AAIqD;;AAAA;;AAEb;;AAAA;;AACV,2HAAqD,SAArD,EAAqD,oGAArD,EAAqD,UAArD,EAAqD,IAArD;;AAIzB;;AAAA;;AAMqB;;AAAA;;AAC2C;;AAAA;;AAEzD;;AAAA;;AAQmC;;AAAA;;AAGvC;;AAAA;;AADe,uGAAiC,UAAjC,EAAiC,uEAAjC,EAAiC,YAAjC,EAAiC,uBAAjC,EAAiC,UAAjC,EAAiC,wBAAjC;;AAMd;;AAAA;;AAIsC;;AAAA;;AAGvC;;AAAA;;AADe,qGAA+B,UAA/B,EAA+B,uEAA/B,EAA+B,YAA/B,EAA+B,uBAA/B,EAA+B,UAA/B,EAA+B,wBAA/B,EAA+B,SAA/B,EAA+B,uBAA/B;;AAMd;;AAAA;;AAMuC;;AAAA;;AAEJ;;AAAA;;AACZ,wHAAkD,SAAlD,EAAkD,sGAAlD,EAAkD,UAAlD,EAAkD,IAAlD,EAAkD,UAAlD,EAAkD,wBAAlD;;AAIvB;;AAAA;;AAKiB;;AAAA;;AAC6C;;AAAA;;AAM7C;;AAAA;;AACW;;AAAA;;AACwB;;AAAA;;AAEA;;AAAA;;;;;;;;;;sED/GhEtC,gB,EAAgB;cAL5B,uDAK4B;eALlB;AACToE,kBAAQ,EAAE,cADD;AAETC,qBAAW,EAAE,2BAFJ;AAGTC,mBAAS,EAAE,CAAC,0BAAD;AAHF,S;AAKkB,Q;;;;;;;;;;;;;;;;;;;;;;gBAG1B,uD;iBAAU,U;;;;;;;;;;;;;;;;;;;;AEjBb;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAyBaC,a;;;;;YAAAA;;;;yBAAAA,a;AAAa,O;AAAA,gBAXf,CACP,4DADO,EAEP,gEAAYC,OAAZ,EAFO,EAGP,4DAHO,EAIP,kEAJO,EAKP,0DALO,EAMP,mEANO,EAOP,6EAPO,EAQP,4EAAmBA,OAAnB,EARO,CAWe;;;;0HAAbD,a,EAAa;AAAA,uBAZT,oEAYS;AAZO,kBAE7B,4DAF6B,EAEjB,+DAFiB,EAI7B,4DAJ6B,EAK7B,kEAL6B,EAM7B,0DAN6B,EAO7B,mEAP6B,EAQ7B,6EAR6B,EAQT,2EARS;AAYP,O;AAJF,K;;;;;sEAIXA,a,EAAa;cAbzB,sDAayB;eAbhB;AACRE,sBAAY,EAAE,CAAC,oEAAD,CADN;AAER3E,iBAAO,EAAE,CACP,4DADO,EAEP,gEAAY0E,OAAZ,EAFO,EAGP,4DAHO,EAIP,kEAJO,EAKP,0DALO,EAMP,mEANO,EAOP,6EAPO,EAQP,4EAAmBA,OAAnB,EARO;AAFD,S;AAagB,Q;;;;;;;;;;;;;;;;;;ACzB1B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAGaE,O,GAAb;AAAA;;AACI,WAAA3C,eAAA,GAA0B,IAAI,gDAAJ,CAAY,EAAZ,EAAe,KAAf,EAAqB,EAArB,EAAwB,EAAxB,EAA4B,IAAI,kDAAJ,CAAa,EAAb,EAAgB,EAAhB,EAAmB,EAAnB,EAAsB,EAAtB,CAA5B,EAAsD,EAAtD,EAAyD,EAAzD,CAA1B;AACA,WAAAC,SAAA,GAAqB,KAArB;AAGA,WAAAyB,kBAAA,GAAiC,IAAIkB,UAAJ,EAAjC;AAIA,WAAApB,gBAAA,GAA4B,IAAI,kDAAJ,CAAa,EAAb,EAAgB,EAAhB,EAAmB,EAAnB,EAAsB,EAAtB,CAA5B;AACA,WAAAqB,MAAA,GAAgB,CAAhB;AACH,K;;QAEKD,U","file":"add-task-add-task-module-es5.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { AddTaskComponent } from './add-task.component';\n\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: AddTaskComponent\n  },\n  {\n    path: ':taskId',\n    component: AddTaskComponent\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class AddTaskRoutingModule { }\n","import { Component, OnInit, ViewChild } from '@angular/core';\nimport { TranslateService } from '@ngx-translate/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { AddTask } from '../core/model/add-task';\nimport { ViewTaskService, ProjectService, ParentTaskService, UserService } from '../core/service';\nimport { ModalService } from '../shared/components/confirmok/data/modal-service';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { NgxSpinnerService } from 'ngx-spinner';\n\n@Component({\n  selector: 'app-add-task',\n  templateUrl: './add-task.component.html',\n  styleUrls: ['./add-task.component.css']\n})\nexport class AddTaskComponent implements OnInit {\n\n  lang: string = 'en';\n  @ViewChild(\"taskForm\") taskForm;\n  public taskModal: AddTask = new AddTask();\n  public selectedTaskModal: AddTask = new AddTask();\n  public selectedTaskId: string;\n  public modelRef: BsModalRef;\n\n  constructor(private translate: TranslateService,\n    private router: ActivatedRoute,\n    private taskService: ViewTaskService,\n    private projectService: ProjectService,\n    private modalService: ModalService,\n    private parentTaskService: ParentTaskService,\n    private userService: UserService,\n    private spinner: NgxSpinnerService,\n    private route: Router) {\n\n    if (this.router.snapshot.params) {\n      this.lang = this.router.snapshot.params.lang;\n      this.translate.setDefaultLang(this.lang);\n      this.translate.use(this.lang);\n    }\n  }\n\n  ngOnInit(): void {\n    this.spinner.show();\n    if (this.router.snapshot.params) {\n      this.selectedTaskId = this.router.snapshot.params.taskId;\n      if (this.selectedTaskId) {\n        this.fetchSelectedTaskById()\n      }\n    }\n    this.spinner.hide();\n  }\n\n  fetchSelectedTaskById() {\n    this.taskService.getTaskById(this.selectedTaskId).subscribe(data => {\n      this.selectedTaskModal = data;\n      console.log(data)\n      this.fetchSelectedProject(data['projectId'])\n\n    })\n  }\n\n  fetchSelectedProject(projectId) {\n    this.projectService.getProjectsById(projectId).subscribe(response => {\n      this.selectedTaskModal.selectedProject = response;\n      this.taskModal = this.selectedTaskModal;\n    })\n  }\n  onSubmit() {\n    if (this.taskModal) {\n      if (this.taskModal.setParent) {\n        this.saveParentTask()\n      } else {\n        this.saveTask()\n      }\n    }\n  }\n\n  saveParentTask() {\n    this.spinner.show();\n    let parentTask = { parentTask: this.taskModal.task }\n    this.parentTaskService.saveParentTask(parentTask).subscribe(response => {\n      this.redirectAfterSave(\"Parent Task Saved successfully\", () => { this.reset() }, \"Success\");\n      this.spinner.hide();\n    }, error => {\n      this.spinner.hide();\n      this.redirectAfterSave(\"Error occured..\", () => { }, \"Error\");\n    })\n  }\n\n  saveTask() {\n    this.spinner.show();\n    if (this.taskModal && this.taskModal.taskId) {\n      this.taskService.updateTask(this.taskModal).subscribe((response) => {\n        this.redirectAfterSave(\"Task Updated successfully\", () => { this.reset() }, \"Success\")\n        this.spinner.hide();\n      },\n        error => {\n          this.spinner.hide();\n          this.redirectAfterSave(\"Error occured \", () => { }, \"Error\")\n        })\n    } else {\n      this.taskService.saveTask(this.taskModal).subscribe(response => {\n        this.redirectAfterSave(\"Task Saved successfully\", () => {\n          this.reset();\n\n          this.route.navigate([this.lang + '/viewTask/']);\n        }, \"Success\");\n        this.spinner.hide();\n      },\n        error => {\n          this.spinner.hide();\n          this.redirectAfterSave(\"Error occured \", () => { }, \"Error\");\n        })\n    }\n  }\n\n  redirectAfterSave(popMsg, confirmCallBack, popTitle) {\n    this.modalService.confirmOK(popMsg, confirmCallBack, popTitle)\n  }\n\n  searchProject() {\n    this.spinner.show();\n    this.projectService.getProjects().subscribe(response => {\n      this.modelRef = this.modalService.openProjectSearchPopUp(response,\n        \"Search Project\",\n        (obj) => { this.searchedProject(obj); },\n        \"Select\")\n      this.spinner.hide();\n    })\n  }\n\n  changeStartDate(event, date) {\n\n  }\n\n  searchEmployee() {\n    this.spinner.show();\n    this.userService.getUserList().subscribe(response => {\n      this.modelRef = this.modalService.openSearchPopUp(response,\n        \"Search Employee\",\n        (obj) => { this.selectedEmployee(obj); },\n        \"Select\")\n      this.spinner.hide();\n    })\n  }\n\n  selectedEmployee(obj) {\n    this.taskModal.selectedEmployee = obj.selectedItem;\n    this.modelRef.hide();\n  }\n  clearParentTask() {\n    this.taskModal.selectedParentTask = new AddTask().selectedParentTask;\n  }\n\n  searchedProject(obj) {\n    this.taskModal.selectedProject = obj.selectedItem;\n    this.modelRef.hide();\n  }\n\n  searchParentTask() {\n    this.spinner.show();\n    this.parentTaskService.getParentTasks().subscribe(response => {\n      this.modelRef = this.modalService.openParentTaskSearchPopUp(response,\n        \"Search Parent Task\",\n        (obj) => { this.selectedParentTask(obj); },\n        \"Select\")\n      this.spinner.hide();\n    })\n  }\n\n  selectedParentTask(obj) {\n\n    this.taskModal.selectedParentTask = obj.selectedItem;\n    this.taskModal.selectedParentTask.parentId = obj.selectedItem.parentId;\n    this.modelRef.hide();\n  }\n\n  reset() {\n    this.taskForm.submitted = false;\n    this.taskModal = new AddTask();\n  }\n}\n","<div class=\"container mt-3\">\n\n    <form name=\"form\" (ngSubmit)=\"taskForm.form.valid && onSubmit()\" #taskForm=\"ngForm\" novalidate>\n\n        <div class=\"form-group row\">\n            <label class=\"control-label col-sm-2\" for=\"pwd\">{{'lblProject' | translate}}:</label>\n            <div class=\"col-sm-8\">\n                <input type=\"text\" class=\"form-control\" placeholder=\"{{'lblSearchProject' | translate}}\" name=\"project\"\n                    [(ngModel)]=\"taskModal.selectedProject.project\" #project=\"ngModel\"\n                    [ngClass]=\"{ 'is-invalid': taskForm.submitted && project.invalid }\" [readonly]=\"true\"\n                    [required]=\"!taskModal.setParent\">\n                <div *ngIf=\"taskForm.submitted && project.invalid\" class=\"error\">\n                    <div *ngIf=\"project.errors.required\">Project is required</div>\n                </div>\n            </div>\n            <div class=\"col-sm-2 m-0\">\n                <button type=\"button\" [disabled]=\"taskModal.setParent || taskModal?.taskId\"\n                    class=\"btn btn-info pull-right m-1\" (click)=\"searchProject()\">{{'btnSearch' | translate}}</button>\n            </div>\n        </div>\n        <div class=\"form-group row\">\n            <label class=\"control-label col-sm-2\" for=\"task\">{{'lblTask' | translate}}:</label>\n            <div class=\"col-sm-10\">\n                <input type=\"text\" class=\"form-control\" name=\"task\" [(ngModel)]=\"taskModal.task\" #task=\"ngModel\"\n                    [ngClass]=\"{ 'is-invalid': taskForm.submitted && task.invalid }\" [required]=\"true\" minlength=\"2\"\n                    maxlength=\"199\" />\n\n                <div *ngIf=\"taskForm.submitted && task.invalid\" class=\"error\">\n                    <div *ngIf=\"task.errors.required\">Task Name is required</div>\n                    <div [hidden]=\"!task.hasError('minlength')\">Task Name is required (minimum 2 characters)</div>\n                </div>\n            </div>\n        </div>\n        <div class=\"form-group row\">\n            <!-- <div class=\"row border\"> -->\n            <label class=\"control-label col-sm-2 col-md-2\"></label>\n            <div class=\"checkbox col-sm-10 col-md-3\">\n                <label><input type=\"checkbox\" [disabled]=\"taskModal?.selectedParentTask?.parentId || taskModal?.taskId\"\n                        name=\"setParent\" [(ngModel)]=\"taskModal.setParent\"> {{'lblParentTask' | translate}}</label>\n            </div>\n        </div>\n        <div class=\"form-group row\">\n            <label class=\"control-label col-sm-2 col-md-2\" for=\"priority\">{{'btnPriority' | translate}}:</label>\n            <div class=\"col-sm-9 col-md-9\">\n                <input type=\"range\" [(ngModel)]=\"taskModal.priority\" [value]=\"taskModal.priority\" [min]=\"0\" [max]=\"30\"\n                    class=\"custom-range\" name=\"priority\">\n            </div>\n            <div class=\"col-sm-1 col-md-1\">\n                {{taskModal.priority}}\n            </div>\n        </div>\n        <div class=\"form-group row\">\n            <label class=\"control-label col-md-2 col-sm-2\" for=\"pwd\">{{'lblParentTask' | translate}}:</label>\n            <div class=\"col-md-7 col-sm-7\">\n                <input type=\"text\" class=\"form-control\" placeholder=\"{{'lblSearchParentTask' | translate}}\"\n                    name=\"selectedParentTask\" [(ngModel)]=\"taskModal.selectedParentTask.parentTask\"\n                    #selectedParentTask=\"ngModel\"\n                    [ngClass]=\"{ 'is-invalid': taskForm.submitted && selectedParentTask.invalid }\" [readonly]=\"true\">\n\n                <div *ngIf=\"taskForm.submitted && selectedParentTask.invalid\" class=\"error\">\n                    <div *ngIf=\"selectedParentTask.errors.required\">Parent Task is required</div>\n                </div>\n            </div>\n            <div class=\"col-md-3 col-sm-3 m-0\">\n                <div class=\"row ml-2\">\n                    <button type=\"button\" [disabled]=\"taskModal.setParent || taskModal.status == 0\"\n                        class=\"btn btn-info pull-right\" (click)=\"searchParentTask()\">{{'btnSearch' | translate}}\n                    </button>\n                    <button *ngIf=\"taskModal?.selectedParentTask?.parentId\" type=\"button\"\n                        [disabled]=\"taskModal.setParent\" class=\"btn btn-secondary pull-right ml-1\"\n                        (click)=\"clearParentTask()\">{{'btnClear' | translate}}\n                    </button>\n                </div>\n            </div>\n        </div>\n            <div class=\"form-group row\">\n                <label class=\"control-label col-sm-2 col-md-2\">{{'btnStartDate' | translate}}:</label>\n                <div class=\"col-xs-6 col-md-4\">\n                    <input type=\"text\" [(ngModel)]=\"taskModal.startDate\" name=\"startDate\" #startDate=\"ngModel\"\n                        placeholder=\"{{'lblStartDate' | translate}}\" class=\"form-control\" bsDatepicker\n                        [bsConfig]=\"{dateInputFormat: 'YYYY-MM-DD'}\" [isDisabled]=\"taskModal.setParent\"\n                        [required]=\"!taskModal.setParent\" (bsValueChange)=\"changeStartDate($event, 'startDate')\"\n                        autocomplete=\"off\"\n                        onkeydown=\"return false\">\n                    <div *ngIf=\"taskForm.submitted && startDate.invalid\" class=\"error\">\n                        <div *ngIf=\"startDate.errors.required\">Start Date is required</div>\n                    </div>\n                </div>\n                <label class=\"control-label col-sm-2 col-md-2\">{{'btnEndDate' | translate}}:</label>\n                <div class=\"col-xs-6 col-md-4\">\n                    <input type=\"text\" [(ngModel)]=\"taskModal.endDate\" name=\"endDate\" #endDate=\"ngModel\"\n                        placeholder=\"{{'lblEndDate' | translate}}\" class=\"form-control\" bsDatepicker\n                        [bsConfig]=\"{dateInputFormat: 'YYYY-MM-DD'}\" [isDisabled]=\"taskModal.setParent\"\n                        [required]=\"!taskModal.setParent\" onkeydown=\"return false\" \n                        autocomplete=\"off\" [minDate]=\"taskModal.startDate\">\n                        \n                    <div *ngIf=\"taskForm.submitted && endDate.invalid\" class=\"error\">\n                        <div *ngIf=\"endDate.errors.required\">End Date is required</div>\n                    </div>\n                </div>\n            </div>\n            <div class=\"form-group row\">\n                <label class=\"control-label col-sm-2\" for=\"pwd\">{{'lblUser' | translate}}:</label>\n                <div class=\"col-sm-8\">\n                    <input type=\"text\" class=\"form-control\" placeholder=\"{{'lblSearchUser' | translate}}\"\n                        name=\"selectedEmployee\" [(ngModel)]=\"taskModal.selectedEmployee.firstName\"\n                        #selectedEmployee=\"ngModel\"\n                        [ngClass]=\"{ 'is-invalid': taskForm.submitted && selectedEmployee.invalid }\" [readonly]=\"true\"\n                        [required]=\"!taskModal.setParent\">\n                    <div *ngIf=\"taskForm.submitted && selectedEmployee.invalid\" class=\"error\">\n                        <div *ngIf=\"selectedEmployee.errors.required\">User is required</div>\n                    </div>\n                </div>\n                <div class=\"col-sm-2\">\n                    <button type=\"button\" [disabled]=\"taskModal.setParent || taskModal?.taskId\"\n                        class=\"btn btn-info pull-right m-1\" (click)=\"searchEmployee()\">{{'btnSearch' | translate}}\n                    </button>\n                </div>\n            </div>\n            <div class=\"form-group row\">\n                <div class=\"col-md-12\">\n                    <button type=\"button\" [disabled]=\"taskModal.status == 0\" class=\"btn btn-secondary float-right m-1\"\n                        id=\"reset\" (click)=\"reset()\">{{'btnReset' | translate}}</button>\n                    <button type=\"submit\" [disabled]=\"taskModal.status == 0\" *ngIf=\"taskModal?.taskId == null\"\n                        class=\"btn btn-primary float-right m-1\" id=\"add\">{{'btnAdd' | translate}}</button>\n                    <button type=\"submit\" [disabled]=\"taskModal.status == 0\" *ngIf=\"taskModal?.taskId != null\"\n                        class=\"btn btn-primary float-right m-1\" id=\"update\">{{'btnUpdate' | translate}}</button>\n                </div>\n            </div>\n    </form>\n</div>\n<ngx-spinner bdColor=\"rgba(51, 51, 51, 0.8)\" size=\"default\" type=\"ball-spin-clockwise\">\n    <p style=\"color: white\">Please Wait. </p>\n</ngx-spinner>","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { AddTaskRoutingModule } from './add-task-routing.module';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { AddTaskComponent } from './add-task.component';\nimport { BsDatepickerModule } from 'ngx-bootstrap/datepicker';\nimport { ModalModule } from 'ngx-bootstrap/modal';\nimport { SharedModule } from '../shared/shared.module';\nimport { NgxSpinnerModule } from 'ngx-spinner';\n\n@NgModule({\n  declarations: [AddTaskComponent],\n  imports: [\n    CommonModule,\n    ModalModule.forRoot(),\n    NgxSpinnerModule,\n    SharedModule,\n    FormsModule,\n    TranslateModule,\n    AddTaskRoutingModule,\n    BsDatepickerModule.forRoot(),\n  ]\n})\nexport class AddTaskModule { }\n","import { Project } from './project';\nimport { Employee } from './employee';\n\nexport class AddTask {\n    selectedProject:Project = new Project('',false,'','', new Employee('','','',''),'','');\n    setParent :boolean = false;\n    taskId:string;\n    task:string;\n    selectedParentTask :ParentTask = new ParentTask();\n    priority:string;\n    endDate:string;\n    startDate:string;\n    selectedEmployee:Employee = new Employee('','','','');\n    status:number = 1;\n}\n\nclass ParentTask{\n    parentId:string;\n    parentTask:any;\n}"]}